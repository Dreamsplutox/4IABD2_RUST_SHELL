{"message":"unreachable expression","code":{"code":"unreachable_code","explanation":null},"level":"warning","spans":[{"file_name":"src\\main.rs","byte_start":5735,"byte_end":5741,"line_start":195,"line_end":195,"column_start":5,"column_end":11,"is_primary":true,"text":[{"text":"    Ok(())","highlight_start":5,"highlight_end":11}],"label":"unreachable expression","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\main.rs","byte_start":933,"byte_end":5721,"line_start":52,"line_end":193,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    loop{","highlight_start":5,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // ECRITURE sur la STDOUT","highlight_start":1,"highlight_end":34},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            let mut handle = stdout.lock(); // STDOUT locked","highlight_start":1,"highlight_end":61},{"text":"            handle.write_all(b\"> \")?; // locked","highlight_start":1,"highlight_end":48},{"text":"            handle.flush()? // locked","highlight_start":1,"highlight_end":38},{"text":"        } // STDOUT unlocked","highlight_start":1,"highlight_end":29},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        let mut user_input = String::with_capacity(256);","highlight_start":1,"highlight_end":57},{"text":"        // On prends un référence mutable","highlight_start":1,"highlight_end":42},{"text":"        stdin.read_line(&mut user_input)?;","highlight_start":1,"highlight_end":43},{"text":"        let user_input = user_input.trim_end();","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // Récupération des éléments entrés dans un vecteur","highlight_start":1,"highlight_end":60},{"text":"        let mut i = 0;","highlight_start":1,"highlight_end":23},{"text":"        let mut words = Vec::new();","highlight_start":1,"highlight_end":36},{"text":"        let mut cmds = Vec::<Cmd>::new();","highlight_start":1,"highlight_end":42},{"text":"        let mut is_name = true;","highlight_start":1,"highlight_end":32},{"text":"        let mut name = 0;","highlight_start":1,"highlight_end":26},{"text":"        let mut begin_args = 0;","highlight_start":1,"highlight_end":32},{"text":"        let mut end_args = 0;","highlight_start":1,"highlight_end":30},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        for token in user_input.split_whitespace(){","highlight_start":1,"highlight_end":52},{"text":"            words.push(token);","highlight_start":1,"highlight_end":31},{"text":"            println!(\"vec {} {}\",i,token);","highlight_start":1,"highlight_end":43},{"text":"            if token == \"|\"{","highlight_start":1,"highlight_end":29},{"text":"                println!(\"pipe\");","highlight_start":1,"highlight_end":34},{"text":"                cmds.push(Cmd::new(name ,begin_args, end_args+1));","highlight_start":1,"highlight_end":67},{"text":"                is_name = true;","highlight_start":1,"highlight_end":32},{"text":"                println!(\"args ==> {}, {}\", begin_args, end_args);","highlight_start":1,"highlight_end":67},{"text":"                begin_args = 0;","highlight_start":1,"highlight_end":32},{"text":"                end_args = 0;","highlight_start":1,"highlight_end":30},{"text":"                //name = 0;","highlight_start":1,"highlight_end":28},{"text":"            }else{","highlight_start":1,"highlight_end":19},{"text":"                if is_name{","highlight_start":1,"highlight_end":28},{"text":"                    println!(\"is name\");","highlight_start":1,"highlight_end":41},{"text":"                    name = i;","highlight_start":1,"highlight_end":30},{"text":"                    is_name = false;","highlight_start":1,"highlight_end":37},{"text":"                }else{","highlight_start":1,"highlight_end":23},{"text":"                    println!(\"args\");","highlight_start":1,"highlight_end":38},{"text":"                    if begin_args == 0{","highlight_start":1,"highlight_end":40},{"text":"                        begin_args = i;","highlight_start":1,"highlight_end":40},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    end_args = i;","highlight_start":1,"highlight_end":34},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            i+=1;","highlight_start":1,"highlight_end":18},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        if begin_args == 0 {","highlight_start":1,"highlight_end":29},{"text":"            cmds.push(Cmd::new(name ,begin_args, end_args));    ","highlight_start":1,"highlight_end":65},{"text":"        }else{","highlight_start":1,"highlight_end":15},{"text":"            cmds.push(Cmd::new(name ,begin_args, end_args+1));  ","highlight_start":1,"highlight_end":65},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        println!(\"words : {:?}\", words);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let mut begin = true;","highlight_start":1,"highlight_end":30},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let command = Command::new(\"ls\")","highlight_start":1,"highlight_end":41},{"text":"                .arg(\"-alh\")","highlight_start":1,"highlight_end":29},{"text":"                .stdout(Stdio::piped())","highlight_start":1,"highlight_end":40},{"text":"                .spawn()","highlight_start":1,"highlight_end":25},{"text":"                .expect(\"I was pancaked while trying to launch ls.\");","highlight_start":1,"highlight_end":70},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let cmd_stdout = Stdio::from(command.stdout.expect(\"Something wrong with ls stdin\"));","highlight_start":1,"highlight_end":94},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        for cmd in &cmds[1..]{","highlight_start":1,"highlight_end":31},{"text":"            //let cmd_stdout = Stdio::from(command.stdout.expect(\"Something wrong with ls stdin\"));","highlight_start":1,"highlight_end":100},{"text":"            //let args_format = format!(\"{:?}\", format_args!(\"{:?}\", &words[cmd.begin_args..cmd.end_args]));","highlight_start":1,"highlight_end":109},{"text":"            //println!(\"cmd : {}  {:?}\", words[cmd.name], &words[cmd.begin_args..cmd.end_args]);","highlight_start":1,"highlight_end":97},{"text":"            //println!(\"cmd : {}, {}, {}\", cmd.name, cmd.begin_args, cmd.end_args);","highlight_start":1,"highlight_end":84},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"            // Stdio::piped() -> type pour representer une entrée/sortie standard qui sera un tube.","highlight_start":1,"highlight_end":100},{"text":"            let command = Command::new(\"wc\")","highlight_start":1,"highlight_end":45},{"text":"            .arg(\"--lines\")","highlight_start":1,"highlight_end":28},{"text":"            .stdin(cmd_stdout)","highlight_start":1,"highlight_end":31},{"text":"            .stdout(Stdio::piped())","highlight_start":1,"highlight_end":36},{"text":"            .spawn()","highlight_start":1,"highlight_end":21},{"text":"            .expect(\"Whopsie! wc failled to launch\");","highlight_start":1,"highlight_end":54},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let cmd_stdout = Stdio::from(command.stdout.expect(\"Something wrong with ls stdin\"));","highlight_start":1,"highlight_end":98},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        let output = Command::new(words[0]).args(&words[0..0]).output()?;","highlight_start":1,"highlight_end":74},{"text":"","highlight_start":1,"highlight_end":1},{"text":"              ","highlight_start":1,"highlight_end":15},{"text":"        let cmd = Command::new(\"ls\")","highlight_start":1,"highlight_end":37},{"text":"        .arg(\"-alh\")","highlight_start":1,"highlight_end":21},{"text":"        .stdout(Stdio::piped())","highlight_start":1,"highlight_end":32},{"text":"        .spawn()","highlight_start":1,"highlight_end":17},{"text":"        .expect(\"I was pancaked while trying to launch ls.\");","highlight_start":1,"highlight_end":62},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let cmd_stdout = Stdio::from(cmd.stdout.expect(\"Something wrong with ls stdin\"));","highlight_start":1,"highlight_end":90},{"text":"        // Stdio::piped() -> type pour representer une entrée/sortie standard qui sera un tube.","highlight_start":1,"highlight_end":96},{"text":"        let cmd = Command::new(\"wc\")","highlight_start":1,"highlight_end":37},{"text":"        .arg(\"--lines\")","highlight_start":1,"highlight_end":24},{"text":"        .stdin(cmd_stdout)","highlight_start":1,"highlight_end":27},{"text":"        .stdout(Stdio::piped())","highlight_start":1,"highlight_end":32},{"text":"        .spawn()","highlight_start":1,"highlight_end":17},{"text":"        .expect(\"Whopsie! wc failled to launch\");","highlight_start":1,"highlight_end":50},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        //let process_stdout = Stdio::from(process.stdout.expect(\"Something wrong with ls stdin\"));","highlight_start":1,"highlight_end":100},{"text":"      ","highlight_start":1,"highlight_end":7},{"text":"        //-----------------------//","highlight_start":1,"highlight_end":36},{"text":"        // Executer une commande //","highlight_start":1,"highlight_end":36},{"text":"        //-----------------------//","highlight_start":1,"highlight_end":36},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        //let output = Command::new(vec[0]).args(&vec[1..]).output()?;","highlight_start":1,"highlight_end":71},{"text":"        //println!(\"stdout value ==> {:?}\",process_stdout);","highlight_start":1,"highlight_end":60},{"text":"        let mut s = String::new();","highlight_start":1,"highlight_end":35},{"text":"        match cmd.stdout.unwrap().read_to_string(&mut s) {","highlight_start":1,"highlight_end":59},{"text":"            Err(why) => println!(\"couldn't read wc stdout: {}\",","highlight_start":1,"highlight_end":64},{"text":"                            why.description()),","highlight_start":1,"highlight_end":48},{"text":"            Ok(_) => print!(\"wc responded with:\\n{}\", s),","highlight_start":1,"highlight_end":58},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        //let output = process;","highlight_start":1,"highlight_end":32},{"text":"        //afficher statut commande","highlight_start":1,"highlight_end":35},{"text":"        //println!(\"status : {}\", output.status);","highlight_start":1,"highlight_end":50},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        //let stdout = io::stdout().write_all(&output.stdout);","highlight_start":1,"highlight_end":63},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        //println!(\"stdout : {:?}\", stdout);","highlight_start":1,"highlight_end":45},{"text":"        //println!(\"stderr : {:?}\", output.stderr);","highlight_start":1,"highlight_end":52},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        //? sert à \"propager l'erreur\"","highlight_start":1,"highlight_end":39},{"text":"        // c'est mieux que crash avec un unwrap ou expect ;)","highlight_start":1,"highlight_end":61},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":"any code following this expression is unreachable","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unreachable_code)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unreachable expression\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:195:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m52\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    loop{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m53\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m54\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        // ECRITURE sur la STDOUT\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m55\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m192\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        // c'est mieux que crash avec un unwrap ou expect ;)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m193\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_____-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14many code following this expression is unreachable\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m194\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m        \u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m195\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m    Ok(())\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11munreachable expression\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[warn(unreachable_code)]` on by default\u001b[0m\n\n"}
{"message":"unused variable: `begin`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src\\main.rs","byte_start":2803,"byte_end":2808,"line_start":115,"line_end":115,"column_start":17,"column_end":22,"is_primary":true,"text":[{"text":"        let mut begin = true;","highlight_start":17,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_variables)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider prefixing with an underscore","code":null,"level":"help","spans":[{"file_name":"src\\main.rs","byte_start":2803,"byte_end":2808,"line_start":115,"line_end":115,"column_start":17,"column_end":22,"is_primary":true,"text":[{"text":"        let mut begin = true;","highlight_start":17,"highlight_end":22}],"label":null,"suggested_replacement":"_begin","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused variable: `begin`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:115:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m115\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        let mut begin = true;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11mhelp: consider prefixing with an underscore: `_begin`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[warn(unused_variables)]` on by default\u001b[0m\n\n"}
{"message":"unused variable: `cmd`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src\\main.rs","byte_start":3131,"byte_end":3134,"line_start":125,"line_end":125,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"        for cmd in &cmds[1..]{","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider prefixing with an underscore","code":null,"level":"help","spans":[{"file_name":"src\\main.rs","byte_start":3131,"byte_end":3134,"line_start":125,"line_end":125,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"        for cmd in &cmds[1..]{","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":"_cmd","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused variable: `cmd`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:125:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m125\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        for cmd in &cmds[1..]{\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11mhelp: consider prefixing with an underscore: `_cmd`\u001b[0m\n\n"}
{"message":"unused variable: `cmd_stdout`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src\\main.rs","byte_start":3890,"byte_end":3900,"line_start":139,"line_end":139,"column_start":17,"column_end":27,"is_primary":true,"text":[{"text":"            let cmd_stdout = Stdio::from(command.stdout.expect(\"Something wrong with ls stdin\"));","highlight_start":17,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider prefixing with an underscore","code":null,"level":"help","spans":[{"file_name":"src\\main.rs","byte_start":3890,"byte_end":3900,"line_start":139,"line_end":139,"column_start":17,"column_end":27,"is_primary":true,"text":[{"text":"            let cmd_stdout = Stdio::from(command.stdout.expect(\"Something wrong with ls stdin\"));","highlight_start":17,"highlight_end":27}],"label":null,"suggested_replacement":"_cmd_stdout","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused variable: `cmd_stdout`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:139:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m139\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m            let cmd_stdout = Stdio::from(command.stdout.expect(\"Something wrong with ls stdin\"));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11mhelp: consider prefixing with an underscore: `_cmd_stdout`\u001b[0m\n\n"}
{"message":"unused variable: `output`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src\\main.rs","byte_start":4030,"byte_end":4036,"line_start":145,"line_end":145,"column_start":13,"column_end":19,"is_primary":true,"text":[{"text":"        let output = Command::new(words[0]).args(&words[0..0]).output()?;","highlight_start":13,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider prefixing with an underscore","code":null,"level":"help","spans":[{"file_name":"src\\main.rs","byte_start":4030,"byte_end":4036,"line_start":145,"line_end":145,"column_start":13,"column_end":19,"is_primary":true,"text":[{"text":"        let output = Command::new(words[0]).args(&words[0..0]).output()?;","highlight_start":13,"highlight_end":19}],"label":null,"suggested_replacement":"_output","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused variable: `output`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:145:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m145\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        let output = Command::new(words[0]).args(&words[0..0]).output()?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11mhelp: consider prefixing with an underscore: `_output`\u001b[0m\n\n"}
{"message":"variable does not need to be mutable","code":{"code":"unused_mut","explanation":null},"level":"warning","spans":[{"file_name":"src\\main.rs","byte_start":2799,"byte_end":2808,"line_start":115,"line_end":115,"column_start":13,"column_end":22,"is_primary":true,"text":[{"text":"        let mut begin = true;","highlight_start":13,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_mut)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this `mut`","code":null,"level":"help","spans":[{"file_name":"src\\main.rs","byte_start":2799,"byte_end":2803,"line_start":115,"line_end":115,"column_start":13,"column_end":17,"is_primary":true,"text":[{"text":"        let mut begin = true;","highlight_start":13,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: variable does not need to be mutable\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:115:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m115\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        let mut begin = true;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m----\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mhelp: remove this `mut`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[warn(unused_mut)]` on by default\u001b[0m\n\n"}
{"message":"use of moved value: `cmd_stdout`","code":{"code":"E0382","explanation":"\nThis error occurs when an attempt is made to use a variable after its contents\nhave been moved elsewhere.\n\nErroneous code example:\n\n```compile_fail,E0382\nstruct MyStruct { s: u32 }\n\nfn main() {\n    let mut x = MyStruct{ s: 5u32 };\n    let y = x;\n    x.s = 6;\n    println!(\"{}\", x.s);\n}\n```\n\nSince `MyStruct` is a type that is not marked `Copy`, the data gets moved out\nof `x` when we set `y`. This is fundamental to Rust's ownership system: outside\nof workarounds like `Rc`, a value cannot be owned by more than one variable.\n\nSometimes we don't need to move the value. Using a reference, we can let another\nfunction borrow the value without changing its ownership. In the example below,\nwe don't actually have to move our string to `calculate_length`, we can give it\na reference to it with `&` instead.\n\n```\nfn main() {\n    let s1 = String::from(\"hello\");\n\n    let len = calculate_length(&s1);\n\n    println!(\"The length of '{}' is {}.\", s1, len);\n}\n\nfn calculate_length(s: &String) -> usize {\n    s.len()\n}\n```\n\nA mutable reference can be created with `&mut`.\n\nSometimes we don't want a reference, but a duplicate. All types marked `Clone`\ncan be duplicated by calling `.clone()`. Subsequent changes to a clone do not\naffect the original variable.\n\nMost types in the standard library are marked `Clone`. The example below\ndemonstrates using `clone()` on a string. `s1` is first set to \"many\", and then\ncopied to `s2`. Then the first character of `s1` is removed, without affecting\n`s2`. \"any many\" is printed to the console.\n\n```\nfn main() {\n    let mut s1 = String::from(\"many\");\n    let s2 = s1.clone();\n    s1.remove(0);\n    println!(\"{} {}\", s1, s2);\n}\n```\n\nIf we control the definition of a type, we can implement `Clone` on it ourselves\nwith `#[derive(Clone)]`.\n\nSome types have no ownership semantics at all and are trivial to duplicate. An\nexample is `i32` and the other number types. We don't have to call `.clone()` to\nclone them, because they are marked `Copy` in addition to `Clone`.  Implicit\ncloning is more convenient in this case. We can mark our own types `Copy` if\nall their members also are marked `Copy`.\n\nIn the example below, we implement a `Point` type. Because it only stores two\nintegers, we opt-out of ownership semantics with `Copy`. Then we can\n`let p2 = p1` without `p1` being moved.\n\n```\n#[derive(Copy, Clone)]\nstruct Point { x: i32, y: i32 }\n\nfn main() {\n    let mut p1 = Point{ x: -1, y: 2 };\n    let p2 = p1;\n    p1.x = 1;\n    println!(\"p1: {}, {}\", p1.x, p1.y);\n    println!(\"p2: {}, {}\", p2.x, p2.y);\n}\n```\n\nAlternatively, if we don't control the struct's definition, or mutable shared\nownership is truly required, we can use `Rc` and `RefCell`:\n\n```\nuse std::cell::RefCell;\nuse std::rc::Rc;\n\nstruct MyStruct { s: u32 }\n\nfn main() {\n    let mut x = Rc::new(RefCell::new(MyStruct{ s: 5u32 }));\n    let y = x.clone();\n    x.borrow_mut().s = 6;\n    println!(\"{}\", x.borrow().s);\n}\n```\n\nWith this approach, x and y share ownership of the data via the `Rc` (reference\ncount type). `RefCell` essentially performs runtime borrow checking: ensuring\nthat at most one writer or multiple readers can access the data at any one time.\n\nIf you wish to learn more about ownership in Rust, start with the chapter in the\nBook:\n\nhttps://doc.rust-lang.org/book/ch04-00-understanding-ownership.html\n"},"level":"error","spans":[{"file_name":"src\\main.rs","byte_start":3750,"byte_end":3760,"line_start":134,"line_end":134,"column_start":20,"column_end":30,"is_primary":true,"text":[{"text":"            .stdin(cmd_stdout)","highlight_start":20,"highlight_end":30}],"label":"value moved here, in previous iteration of loop","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\main.rs","byte_start":5720,"byte_end":5721,"line_start":193,"line_end":193,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    }","highlight_start":5,"highlight_end":6}],"label":"value moved here, in previous iteration of loop","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\main.rs","byte_start":3036,"byte_end":3046,"line_start":123,"line_end":123,"column_start":13,"column_end":23,"is_primary":false,"text":[{"text":"        let cmd_stdout = Stdio::from(command.stdout.expect(\"Something wrong with ls stdin\"));","highlight_start":13,"highlight_end":23}],"label":"move occurs because `cmd_stdout` has type `std::process::Stdio`, which does not implement the `Copy` trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0382]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: use of moved value: `cmd_stdout`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:134:20\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m123\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        let cmd_stdout = Stdio::from(command.stdout.expect(\"Something wrong with ls stdin\"));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mmove occurs because `cmd_stdout` has type `std::process::Stdio`, which does not implement the `Copy` trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m134\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m            .stdin(cmd_stdout)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mvalue moved here, in previous iteration of loop\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m193\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mvalue moved here, in previous iteration of loop\u001b[0m\n\n"}
{"message":"aborting due to previous error","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: aborting due to previous error\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0382`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mFor more information about this error, try `rustc --explain E0382`.\u001b[0m\n"}
